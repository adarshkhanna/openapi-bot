import library "OpenAPIExample/src/OpenAPIExampleLibrary.intent" as OpenAPILibrary
import library "CoreLibrary"
import platform "openapi-platform-model/src/OpenAPIPlatform.platform" as OpenAPIPlatform
import platform "ReactPlatform"

use provider ReactPlatform.ReactEventProvider
use provider ReactPlatform.ReactIntentProvider


on intent Default_Fallback_Intent do
	ReactPlatform.Reply("This is awkward. I could not treat your request")
	ReactPlatform.Reply("Would you please try again")

////////// API /////////////////////
//We load here a definition from a url. We need to add more messages to guide the user about the questions he could ask
on intent LoadAPI do
	ReactPlatform.Reply("Loading API from " + context.get("API").get("opneAPIURL") as String)
	val result = OpenAPIPlatform.LoadAPI(context.get("API").get("opneAPIURL") as String)
	if(result.get("loaded") == false){
		val reason = result.get("reason") as String
		if(reason.equals("OpenAPIValidationException")){
			ReactPlatform.Reply("Oops, Your OpenAPI definition is not valid")
			ReactPlatform.Reply("Here is the validation report:")
			val reportItems = ReactPlatform.ItemizeList(result.get("report") as java.util.List<String>)
			ReactPlatform.Reply(reportItems as String)
		}
		else {
			ReactPlatform.Reply("Oops, I could not parse the API")
			ReactPlatform.Reply("Here is the error message:")
			ReactPlatform.Reply(result.get("errorMessage") as String)
		}
	}
	else {
		val api = result.get("api") as edu.uoc.som.openapi2.API
		ReactPlatform.Reply("The API "+api.getInfo().getTitle()+", version "+api.getInfo().getVersion()+", was successfully loaded")
		ReactPlatform.Reply("Ask me something")
	}
	
on intent GetAPIDetails do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	}
	else {
		ReactPlatform.Reply("The host serving the API is `"+api.getHost()+"`")
		ReactPlatform.Reply("The base path on which the API is served is `"+api.getBasePath()+"`")
		if(api.getSchemes().size()== 1){
			ReactPlatform.Reply("The transfer protocol of the API is `"+api.getSchemes().get(0)+"`")
		}
		if(api.getSchemes().size()>1){
			ReactPlatform.Reply("The transfer protocols of the API are:")
			ReactPlatform.ItemizeList(api.getSchemes())
		}
		ReactPlatform.Reply("The API includes "+api.getPaths().size()+ " paths and a total of "+api.getAllOperations().size()+ " operations")
		ReactPlatform.Reply("It also includes "+api.getDefinitions().size()+" definitions")
		ReactPlatform.Reply("What else do you want to know?")
	}

////////// Path intent /////////////////////
//Intents related to Path element
on intent ListPaths do
	val api = session.get("xatkit.plugins.openapi.api")
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val pathList = OpenAPIPlatform.ListPaths
		val pathEnum = ReactPlatform.EnumerateList(pathList)
		ReactPlatform.Reply(pathEnum as String)
	}
	


on intent GetPathDetails do
	val api = session.get("xatkit.plugins.openapi.api")
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val result = OpenAPIPlatform.GetPathDetails(context.get("RelativePath").get("relativePath") as String)
		if(result.get("found") == true){
			val path = result.get("value") as edu.uoc.som.openapi2.Path
			val operations = result.get("operations") as java.util.List<edu.uoc.som.openapi2.Operation>
			if(operations.isEmpty()){
				ReactPlatform.Reply("There are no operations defined on this path")
			}
			else {
				ReactPlatform.Reply("There are "+operations.size()+" available operations on the path "+path.getRelativePath())
				val operationItemize = ReactPlatform.ItemizeList(operations)
				ReactPlatform.Reply(operationItemize as String)
			}
		}
		else {
			ReactPlatform.Reply("Oops! I could not find the path " + context.get("RelativePath").get("relativePath"))
			val pathItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<edu.uoc.som.openapi2.Path>)
				ReactPlatform.Reply("The available paths on this API are: ")
				ReactPlatform.Reply(pathItemize as String)
			 }
		}
on intent GetNumberOfPath do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val result = OpenAPIPlatform.ListPaths
		ReactPlatform.Reply("There are " + result.size() + " paths in the API")
	}
	
////////// Operation intents /////////////////////
on intent ListOperationsOnPathUsingRowNumber  do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api===null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val operationList = OpenAPIPlatform.ListOperationsOnPathUsingRowNumber(context.get("Path").get("pathIdentifier") as Integer)
		val operationItemize = ReactPlatform.ItemizeList(operationList)
		ReactPlatform.Reply("Here are the operations I found for the path:")
		ReactPlatform.Reply(operationItemize as String)
		}


on intent GetOperationById do
	val api = session.get("xatkit.plugins.openapi.api")
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val result = OpenAPIPlatform.GetOperationById(context.get("Operation").get("operationId") as String)
			if(result.get("found") == false){
				val operationItemize = ReactPlatform.ItemizeList(result.get("operations") as java.util.List<edu.uoc.som.openapi2.Operation>)
				ReactPlatform.Reply("Oops! I could not find the operation `"+context.get("Operation").get("operationId")+"`")
				ReactPlatform.Reply("The operations provided by the API are: ")
				ReactPlatform.Reply(operationItemize as String)
		}
		else {
			//Display the details of an operation
			val operation = result.get("value") as edu.uoc.som.openapi2.Operation
			ReactPlatform.Reply("`"+result.get("path")+"`: "+operation.getHTTPMethod()+" "+operation.getSummary()+" ("+operation.getOperationId()+"`)")
			val parameters = operation.getParameters() as java.util.List<edu.uoc.som.openapi2.Parameter>
			val responses = result.get("responses") as org.eclipse.emf.common.util.EMap<String, edu.uoc.som.openapi2.Response>
			if(parameters.isEmpty()){
				ReactPlatform.Reply("The operation does not declare any parameters")
			}
			else {
				if(parameters.size() == 1){
					ReactPlatform.Reply("The operation has "+parameters.size()+" parameter:")
				}
				else {
					ReactPlatform.Reply("The operation has "+parameters.size()+" parameters:")
				}
				val parameterItemize = ReactPlatform.ItemizeList(parameters)
				ReactPlatform.Reply(parameterItemize as String)
			}
			if(responses.isEmpty()){
				ReactPlatform.Reply("The operation does not declare any responses")
			}
			else {
				if(responses.size() == 1){
					ReactPlatform.Reply("The operation has "+responses.size()+" response:")
				}
				else {
					ReactPlatform.Reply("The operation has "+responses.size()+" responses:")
				}
			
				val responsesItemize = ReactPlatform.ItemizeList(responses)
				ReactPlatform.Reply(responsesItemize as String)
			}
		}
	}
	



	
on intent SupportedSchemes do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val result = OpenAPIPlatform.SupportedSchemes
		if(result.isEmpty()) {
			ReactPlatform.Reply("No transfer protocols found.")
			ReactPlatform.Reply("This means that the default scheme to be used is the one used to access the OpenAPI definition itself.")
		} else {
			ReactPlatform.Reply("This API supports: ")
			val itemize = ReactPlatform.ItemizeList(result)
			ReactPlatform.Reply(itemize as String)
		}
	}



on intent AskLicenseInfo do 
	val api = session.get("xatkit.plugins.openapi.api")
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {
		val result = OpenAPIPlatform.GetLicense
		ReactPlatform.Reply("The license is " + result)
		}

	



on intent GetOperationByPathAndHttpMethod do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
		val result = OpenAPIPlatform.GetOperationByPathAndHttpMethod(context.get("Operation").get("operationPath") as String, context.get("Operation").get("operationHttpMethod") as String) 
		if(result.get("found") == false){
			val reason = result.get("reason") as String
			//operation not found 
			if(reason.equals("OperationNotFound")){
				val operationItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<edu.uoc.som.openapi2.Operation>)
				ReactPlatform.Reply("Oops! I could not find the operation "+context.get("Operation").get("operationHttpMethod")+" on the path "+context.get("Operation").get("operationPath"))
				ReactPlatform.Reply("The available operations on this path are: ")
				ReactPlatform.Reply(operationItemize as String)
			}
			if(reason.equals("PathNotFound")){
				val pathItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<edu.uoc.som.openapi2.Path>)
				ReactPlatform.Reply("Oops! I could not find the path "+context.get("Operation").get("operationPath"))
				ReactPlatform.Reply("The available paths on this API are: ")
				ReactPlatform.Reply(pathItemize as String)
			}
		}
		else {
			//Display the details of an operation
			val operation = result.get("value") as edu.uoc.som.openapi2.Operation
			ReactPlatform.Reply("`"+context.get("Operation").get("operationHttpMethod")+": "+context.get("Operation").get("operationPath")+operation.getSummary()+" (`"+operation.getOperationId()+"`)")
			val parameters = operation.getParameters() as java.util.List<edu.uoc.som.openapi2.Parameter>
			val responses = result.get("responses") as org.eclipse.emf.common.util.EMap<String, edu.uoc.som.openapi2.Response>
			if(parameters.isEmpty()){
				ReactPlatform.Reply("The operation does not declare any parameters")
				
			}
			else {
				if(parameters.size() == 1){
					ReactPlatform.Reply("The operation has "+parameters.size()+" parameter:")
				}
				else {
					ReactPlatform.Reply("The operation has "+parameters.size()+" parameters:")
				}
			
				val parameterItemize = ReactPlatform.ItemizeList(parameters)
				ReactPlatform.Reply(parameterItemize as String)
			
			}
			if(responses.isEmpty()){
				ReactPlatform.Reply("The operation does not declare any responses")	
			}
			else {
				if(parameters.size() == 1){
					ReactPlatform.Reply("The operation has "+responses.size()+" response:")
				}
				else {
					ReactPlatform.Reply("The operation has "+responses.size()+" responses:")
				}
			
				val responsesItemize = ReactPlatform.ItemizeList(responses)
				ReactPlatform.Reply(responsesItemize as String)
			}
		}	
	}
	




//Security actions	
on intent IsAuthenticationRequired do
	val api = session.get("xatkit.plugins.openapi.api")
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {  
		val result = OpenAPIPlatform.IsAuthenticationRequired as org.eclipse.emf.common.util.EMap<String, Object>
		val security = result.get("security") as java.util.List<edu.uoc.som.openapi2.SecurityRequirement>
		if(security.isEmpty) {
			ReactPlatform.Reply("No")
		}
		else {
			ReactPlatform.Reply("Yes")
		}
	}
	
on intent IsAuthenticationRequiredOperation do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {  
		val result = OpenAPIPlatform.IsAuthenticationRequiredOperation(context.get("Operation").get("operationId") as String)
		if(result.get("found") == false){
			val operationItemize = ReactPlatform.ItemizeList(result.get("operations") as java.util.List<edu.uoc.som.openapi2.Operation>)
			ReactPlatform.Reply("Oops! I could not find the operation "+context.get("Operation").get("operationId"))
			ReactPlatform.Reply("The operations provided by the API are: ")
			ReactPlatform.Reply(operationItemize as String)
		}
	else {
		val answer = result.get("answer")
		if(answer == false){
			ReactPlatform.Reply("No authentication required to execute this operation.")
			}
			else {
				val options = ReactPlatform.ItemizeList(result.get("options") as java.util.List<edu.uoc.som.openapi2.SecurityRequirement>)
				ReactPlatform.Reply("Yes, authentication is needed to execute the operation "+ context.get("Operation").get("operationId"))
			
			}
		}
	}
	
on intent SecuritySchemeList do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else {  
		val result = OpenAPIPlatform.SecuritySchemeList
		if(result.isEmpty()){
			ReactPlatform.Reply("No security schemes found")
		}
		else {
			val securitySchemeItemize = ReactPlatform.ItemizeList(result)
			ReactPlatform.Reply("The security schemes provided by the API are: ")
			ReactPlatform.Reply(securitySchemeItemize as String)
		}
	}
	
on intent SecuritySchemeDetails do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
		val result = OpenAPIPlatform.SecuritySchemeDetails(context.get("SecurityScheme").get("securitySchemeId") as String)
		if(result.get("found") == false){
			ReactPlatform.Reply("Oops! I could not find the security scheme "+context.get("SecurityScheme").get("securitySchemeId"))
		} else {
			val securityScheme = result.get("value") as edu.uoc.som.openapi2.SecurityScheme
			 ReactPlatform.Reply("Here is the definition of the security scheme "+context.get("SecurityScheme").get("securitySchemeId")+":  \nType: "+securityScheme.getType()+"  \nName: "+securityScheme.getName()+"  \nIn: "+securityScheme.getLocation())
			}
		}

////////// Schema intents /////////////////////
 on intent ListSchemaDefinitions do 
 	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
 		val result = OpenAPIPlatform.ListSchemaDefinitions
 		if(result.isEmpty()){
 			ReactPlatform.Reply("No schema definitions found")
 		}
 		else {
 			val schemaItems = ReactPlatform.EnumerateList(result)
 			 ReactPlatform.Reply(schemaItems as String)
 		}
 	}
 	

on intent GetSchemaDetails do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api=== null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
 		val result = OpenAPIPlatform.GetSchemaDetails(context.get("Schema").get("schemaName") as String)
 		if(result.get("found") == false){
 			ReactPlatform.Reply("Oops! I could not find the schema "+ context.get("Schema").get("schemaName"))
 			val schemaItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<String>)
			ReactPlatform.Reply("The available schema definitions are: ")
			ReactPlatform.Reply(schemaItemize as String)
 		}
 		else {
 			val schema = result.get("value") as edu.uoc.som.openapi2.Schema
 			val propertiesItems = ReactPlatform.ItemizeList(schema.getProperties())
 			ReactPlatform.Reply(propertiesItems as String)
 		}
 	}
 	
on intent GetOperationsConsumingSchema do 
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
		val result = OpenAPIPlatform.GetOperationsConsumingSchema(context.get("Schema").get("schemaName") as String)
		if(result.get("found")== false){
			val reason = result.get("reason")
			//the schema could not found on the definition
			if(reason.equals("SchemaNotFound")){
				ReactPlatform.Reply("Oops! I could not find the schema "+ context.get("Schema").get("schemaName") as String)
 				val schemaItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<String>)
				ReactPlatform.Reply("The available schema definitions are: ")
				ReactPlatform.Reply(schemaItemize as String)
			}
			if(reason.equals("Empty")){
				ReactPlatform.Reply("No operations found")
			}
		}
		else {
			val operationItemize = ReactPlatform.ItemizeList(result.get("value") as java.util.List<edu.uoc.som.openapi2.Operation>)
			ReactPlatform.Reply("The operations which consume instances of "+context.get("Schema").get("schemaName")+" are:")
			ReactPlatform.Reply(operationItemize as String)
		}
	}
	
	
on intent GetOperationsReturningSchema do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
		val result = OpenAPIPlatform.GetOperationsReturningSchema(context.get("Schema").get("schemaName") as String)
		if(result.get("found")== false){
			val reason = result.get("reason")
			//the schema could not found on the definition
			if(reason.equals("SchemaNotFound")){
				ReactPlatform.Reply("Oops! I could not find the schema "+ context.get("Schema").get("schemaName"))
 				val schemaItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<String>)
				ReactPlatform.Reply("The available schema definitions are: ")
				ReactPlatform.Reply(schemaItemize as String)
			}
			if(reason.equals("Empty")){
				ReactPlatform.Reply("No operations found")
			}
		}
		else {
			val operationItemize = ReactPlatform.ItemizeList(result.get("value") as java.util.List<edu.uoc.som.openapi2.Operation>)
			ReactPlatform.Reply("The operations which return instances of "+context.get("Schema").get("schemaName")+" are:")
			ReactPlatform.Reply(operationItemize as String)
		}	
	}
 
 on intent GetOperationsReusingSchemaParts do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api === null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
		val result = OpenAPIPlatform.GetOperationsReusingSchemaParts(context.get("Schema").get("schemaName") as String)
		if(result.get("found")== false){
			val reason = result.get("reason")
			//the schema could not found on the definition
			if(reason.equals("SchemaNotFound")){
				ReactPlatform.Reply("Oops! I could not find the schema "+ context.get("Schema").get("schemaName"))
 				val schemaItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<String>)
				ReactPlatform.Reply("The available schema definitions are: ")
				ReactPlatform.Reply(schemaItemize as String)
			}
			if(reason.equals("Empty")){
				ReactPlatform.Reply("I could not find anything")
			}
		}
		else {
			val operationItemize = ReactPlatform.ItemizeList(result.get("value") as java.util.List<edu.uoc.som.openapi2.Operation>)
			ReactPlatform.Reply("I think these properties of the definition "+context.get("Schema").get("schemaName")+" are used by some operations:")
			ReactPlatform.Reply(operationItemize as String)
		}	
	}

 	
 on intent GetSchemasReusingSchemaParts do
	val api = session.get("xatkit.plugins.openapi.api") as edu.uoc.som.openapi2.API
	if(api===null){
		ReactPlatform.Reply("You need to load an API first")
		ReactPlatform.Reply("What is the URL of the API you want to know about?")
	} else { 
		val result = OpenAPIPlatform.GetSchemasReusingSchemaParts(context.get("Schema").get("schemaName") as String)
		if(result.get("found")== false){
			val reason = result.get("reason")
			//the schema could not found on the definition
			if(reason.equals("SchemaNotFound")){
				ReactPlatform.Reply("Oops! I could not find the schema "+ context.get("Schema").get("schemaName"))
 				val schemaItemize = ReactPlatform.ItemizeList(result.get("options") as java.util.List<String>)
				ReactPlatform.Reply("The available schema definitions are: ")
				ReactPlatform.Reply(schemaItemize as String)
			}
			if(reason.equals("Empty")){
				ReactPlatform.Reply("Sorry, I couldn't find anything")
			}
		}
		else {
			val schemaItemize = ReactPlatform.ItemizeList(result.get("value") as java.util.List<edu.uoc.som.openapi2.Operation>)
			ReactPlatform.Reply("I think these properties of the definition "+context.get("Schema").get("schemaName")+" are used in other definitions:")
			ReactPlatform.Reply(schemaItemize as String)
		}	
	}

 	
	
	