import library "OpenAPIExample/OpenAPIExampleLibrary.xmi" as OpenAPILibrary
import library "CoreLibrary"
import platform "OpenAPIPlatform/OpenAPIPlatform.xmi" as OpenAPIPlatform
import platform "ReactPlatform"

use provider ReactPlatform.ReactIntentProvider


on intent Default_Fallback_Intent do
	action ReactPlatform.Reply(message : "This is awkward. I could not treat request")
	action ReactPlatform.Reply(message : "Would you, please, rephrase")

////////// Load API /////////////////////
//We load here a definition from a url. We need to add more messages to guide the user about the questions he could ask
on intent LoadAPI do
	action ReactPlatform.Reply(message : "Loading API from " + context(API).get("url"))
	def result = action OpenAPIPlatform.LoadAPI(url : context(API).get("url"))
	if(result.get("loaded") == false){
		action ReactPlatform.Reply(message : "Oops, I could not parse the API. Make sure that you provided a valid API")
		action ReactPlatform.Reply(message : "Here is the error message")
		action ReactPlatform.Reply(message : result.get("error"))
	}
	else {
		def api = result.get("api")
		action ReactPlatform.Reply(message : "The API "+api.getInfo().getTitle()+", version "+api.getInfo().getVersion()+", was successfully loaded")
		action ReactPlatform.Reply(message : "Ask me something")
	}

////////// Path intent /////////////////////
//Intents related to Path element
on intent ListPaths do
	def loadedAPI = session.get("xatkit.plugins.openapi.api")
	if(loadedAPI.isNull()) {
		action ReactPlatform.Reply(message : "Can you give me an API?")
	} else {
		def pathList = action OpenAPIPlatform.ListPaths
		def pathEnum = action ReactPlatform.EnumerateList(list : pathList)
		action ReactPlatform.Reply(message : pathEnum)
	}
	
//on intent ListPathFallback do
//	action ReactPlatform.Reply(message : "Loading API from " + context(API).get("url"))
//	def result = action OpenAPIPlatform.LoadAPI(url : context(API).get("url"))
//	if(result.get("loaded") == false){
//		action ReactPlatform.Reply(message : "Oops, we could not parse the API. Make sure that you provided a valid API")
//		action ReactPlatform.Reply(message : "Here is the error message")
//		action ReactPlatform.Reply(message : result.get("error"))
//	}
//	else {
//		def api = result.get("api")
//		action ReactPlatform.Reply(message : "The API "+api.getInfo().getTitle()+", version "+api.getInfo().getVersion()+", was successfully loaded")
//		def loadedAPI = session.get("xatkit.plugins.openapi.api")
//		if(loadedAPI.isNull()) {
//			action ReactPlatform.Reply(message : "Can you give me an API?")
//		} else {
//			def pathList = action OpenAPIPlatform.ListPaths
//			def pathEnum = action ReactPlatform.EnumerateList(list : pathList)
//			action ReactPlatform.Reply(message : pathEnum)
//		}
//	}


on intent GetPathDetails do
	def result = action OpenAPIPlatform.GetPathDetails(relativePath :  context(RelativePath).get("relativePath"))
	if(result.get("found") == true){
		action ReactPlatform.Reply(message : result.get("formattedValue"))		
	}
	else {
		action ReactPlatform.Reply(message : "Oops! I could not find the path " + context(RelativePath).get("relativePath"))
	}
	
on intent GetNumberOfPath do
	def result = action OpenAPIPlatform.ListPaths
	action ReactPlatform.Reply(message : "There are " + result.size() + " paths in the API")
	
////////// Operation intent /////////////////////
on intent ListOperationsOnPathUsingRowNumber  do
	def operationList = action OpenAPIPlatform.ListOperationsOnPathUsingRowNumber(pathIdentifier : context(Path).get("pathIdentifier"))
	def operationItemize = action ReactPlatform.ItemizeList(list : operationList)
	action ReactPlatform.Reply(message : "Here are the operations I found for the path:")
	action ReactPlatform.Reply(message : operationItemize)

on intent AskLicenseInfo do 
	def result = action OpenAPIPlatform.GetLicense
	action ReactPlatform.Reply(message : "The license is " + result)

	
on intent SupportedSchemes do
	def result = action OpenAPIPlatform.SupportedSchemes
	if(result.isEmpty()) {
		action ReactPlatform.Reply(message : "No transfer protocols found.")
		action ReactPlatform.Reply(message : "This means that the default scheme to be used is the one used to access the OpenAPI definition itself.")
	} else {
		action ReactPlatform.Reply(message : "This API supports: ")
		def itemize = action ReactPlatform.ItemizeList(list : result)
		action ReactPlatform.Reply(message : itemize)
	}



//Security actions	
on intent IsAuthenticationRequired do 
	def result = action OpenAPIPlatform.IsAuthenticationRequired
	if(result.isEmpty()) {
		action ReactPlatform.Reply(message : "No")
	}
	else {
		action ReactPlatform.Reply(message : "Yes")
	}
	
on intent IsAuthenticationRequiredOperation do 
	def result = action OpenAPIPlatform.IsAuthenticationRequiredOperation(operationId : context(Operation).get("operationId"))
	if(result.get("found") == false){
		def operationItemize = action ReactPlatform.ItemizeList(list : result.get("operations"))
		action ReactPlatform.Reply(message : "Oops! I could not find the operation "+context(Operation).get("operationId"))
		action ReactPlatform.Reply(message : "The operations provided by the API are: ")
		action ReactPlatform.Reply(message : operationItemize)
	}

else {
	def answer = result.get("answer")
	if(answer == false){
		action ReactPlatform.Reply(message : "No authentication required to execute this operation.")
		}
		else {
			def options = action ReactPlatform.ItemizeList(list : result.get("options"))
			action ReactPlatform.Reply(message : "Yes, authentication is needed to execute operation "+ context(Operation).get("operationId"))
			action ReactPlatform.Reply(message : "You should use one of the following authentication methods:")
			action ReactPlatform.Reply(message : options)
		}
	}
	
on intent SecuritySchemeList do 
	def result = action OpenAPIPlatform.SecuritySchemeList
	if(result.isEmpty()){
		action ReactPlatform.Reply(message : "No security schemes found")
	}
	else {
		def securitySchemeItemize = action ReactPlatform.ItemizeList(list : result)
		action ReactPlatform.Reply(message : "The security schemes provided by the API are: ")
		action ReactPlatform.Reply(message : securitySchemeItemize)
	}
	
on intent SecuritySchemeDetails do
	def result = action OpenAPIPlatform.SecuritySchemeDetails(securitySchemeId : context(SecurityScheme).get("securitySchemeId"))
	if(result.get("found") == false){
		action ReactPlatform.Reply(message : "Oops! I could not find the security scheme "+context(SecurityScheme).get("securitySchemeId"))
	}else {
		def securityScheme = result.get("value")
		action  ReactPlatform.Reply(message : "Here is the definition of the security scheme "+context(SecurityScheme).get("securitySchemeId")+":  \nType: "+securityScheme.getType()+"  \nName: "+securityScheme.getName()+"  \nIn: "+securityScheme.getLocation())
		}

	
	